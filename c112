// ConsoleApplication1.cpp: определяет точку входа для консольного приложения.
//

#include <iostream>
#include <vector>
#include <queue>
#include <fstream>
#include <string>
#include <algorithm>
#include <sstream>
using namespace std;

const int Minimer = 10000;
ifstream fcin("knight.in");
ofstream fcout("knight.out");

struct coord {
	int i, j, distance;
};

void NewLine() {
	cout << endl;
}

int main() {

	coord x, y, distance[200][200],put[200][200];
	int n, z = -1;
	fcin >> n >> x.i >> x.j >> y.i >> y.j;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			distance[i][j].distance = Minimer;
			put[i][j].distance = -1;
		}
	}
	x.i--; x.j--;
//	y.i--; y.j--;
	distance[x.i][x.j].distance = 0;

	queue<coord>q; 
	q.push(x);
	int ii[] = { -1,-2,1,1,1,2,2,1 },
	jj[] = { -2,-1,2,2,-2,-1,1,2 };

	while (!q.empty()) {
		coord tmp = q.front();
		q.pop();
		for (int i = 0; i < 8; i++) {
			int i1 = tmp.i + ii[i], 
				j1 = tmp.j + jj[i];
			if (i1 <= n && i1 >= 0 && j1 <= n&&j1 >= 0 && distance[tmp.i][tmp.j].distance + 1 < distance[i1][j1].distance) {
				distance[i1][j1].distance = distance[tmp.i][tmp.j].distance + 1;
				put[tmp.i][tmp.j] = distance[i1][j1];
				put[tmp.i][tmp.j].distance = distance[i1][j1].distance;
				
				q.push(distance[tmp.i][tmp.j]);
			}
		}

	}
	fcout << distance[y.i - 1][y.j - 1].distance << endl;

	vector<coord>path;
	coord tmp = y;
	while (put[tmp.i][tmp.j].distance != -1) {

		path.push_back(put[tmp.i][tmp.j]);
		tmp = put[tmp.i][tmp.j];
		
	}
	
	for (int i = path.size(); i > 0; i--) {
		for (int j = path.size(); j > 0; j--) {
			fcout << path[j].i << " ";
		}
		fcout << endl;
	}
}

